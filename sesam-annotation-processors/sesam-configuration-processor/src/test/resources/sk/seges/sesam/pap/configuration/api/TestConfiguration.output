package sk.seges.sesam.pap.configuration.api;
import java.io.PrintStream;

import javax.annotation.Generated;

import sk.seges.sesam.core.configuration.annotation.Settings;
import sk.seges.sesam.core.configuration.api.ConfigurationValue;
import sk.seges.sesam.core.configuration.utils.ConfigurationUtils;

@Settings(configuration = TestConfiguration.class)
@Generated(value = "sk.seges.sesam.pap.configuration.processor.SettingsProcessor")
public class TestConfigurationSettings {
	 
	private Boolean bromine;
	
	private Integer brominePort;
	
	private String bromineServer;
	
	private Integer seleniumPort;
	
	private Boolean seleniumRemote;
	
	private String seleniumServer;
	
	private String testURI;
	
	private String testURL;
	
	/**
	* Enables/disables support for bromine.
	*/
	public Boolean getBromine() {
		return bromine;
	}
	
	public void setBromine(Boolean bromine) {
		this.bromine = bromine;
	}
	
	/**
	* Defines port name where the bromine server is located.
	*/
	public Integer getBrominePort() {
		return brominePort;
	}
	
	public void setBrominePort(Integer brominePort) {
		this.brominePort = brominePort;
	}
	
	/**
	* Defines host name where the bromine server is located.
	*/
	public String getBromineServer() {
		return bromineServer;
	}
	
	public void setBromineServer(String bromineServer) {
		this.bromineServer = bromineServer;
	}
	
	/**
	* Defines port name where the selenium server is located.
	*/
	public Integer getSeleniumPort() {
		return seleniumPort;
	}
	
	public void setSeleniumPort(Integer seleniumPort) {
		this.seleniumPort = seleniumPort;
	}
	
	/**
	* Defines support for connection to the remote server instance.
	*/
	public Boolean getSeleniumRemote() {
		return seleniumRemote;
	}
	
	public void setSeleniumRemote(Boolean seleniumRemote) {
		this.seleniumRemote = seleniumRemote;
	}
	
	/**
	* Defines host name where the selenium server is located.
	*/
	public String getSeleniumServer() {
		return seleniumServer;
	}
	
	public void setSeleniumServer(String seleniumServer) {
		this.seleniumServer = seleniumServer;
	}
	
	/**
	* Defines relative URI of the testing home page.
	*/
	public String getTestURI() {
		return testURI;
	}
	
	public void setTestURI(String testURI) {
		this.testURI = testURI;
	}
	
	/**
	* Defines root URL of the testing site.
	*/
	public String getTestURL() {
		return testURL;
	}
	
	public void setTestURL(String testURL) {
		this.testURL = testURL;
	}
	
	public TestConfigurationSettings(ConfigurationValue[] configurations) {
		this.bromine = ConfigurationUtils.getConfigurationBoolean(configurations, "test.bromineEnabled");
		this.brominePort = ConfigurationUtils.getConfigurationInt(configurations, "test.brominePort");
		this.bromineServer = ConfigurationUtils.getConfigurationValue(configurations, "test.bromineHost");
		this.seleniumPort = ConfigurationUtils.getConfigurationInt(configurations, "test.seleniumPort");
		this.seleniumRemote = ConfigurationUtils.getConfigurationBoolean(configurations, "test.testRemote");
		this.seleniumServer = ConfigurationUtils.getConfigurationValue(configurations, "test.seleniumHost");
		this.testURI = ConfigurationUtils.getConfigurationValue(configurations, "test.testUri");
		this.testURL = ConfigurationUtils.getConfigurationValue(configurations, "test.testHost");
	}
	
	public TestConfigurationSettings(Boolean bromine, Integer brominePort, String bromineServer, Integer seleniumPort, Boolean seleniumRemote, String seleniumServer, String testURI, String testURL) {
		this.bromine = bromine;
		this.brominePort = brominePort;
		this.bromineServer = bromineServer;
		this.seleniumPort = seleniumPort;
		this.seleniumRemote = seleniumRemote;
		this.seleniumServer = seleniumServer;
		this.testURI = testURI;
		this.testURL = testURL;
	}
	
	public TestConfigurationSettings(TestConfigurationSettings testConfigurationSettings) {
		this.bromine = testConfigurationSettings.getBromine();
		this.brominePort = testConfigurationSettings.getBrominePort();
		this.bromineServer = testConfigurationSettings.getBromineServer();
		this.seleniumPort = testConfigurationSettings.getSeleniumPort();
		this.seleniumRemote = testConfigurationSettings.getSeleniumRemote();
		this.seleniumServer = testConfigurationSettings.getSeleniumServer();
		this.testURI = testConfigurationSettings.getTestURI();
		this.testURL = testConfigurationSettings.getTestURL();
	}
	
	public TestConfigurationSettings merge(TestConfigurationSettings testConfigurationSettings) {
		if (testConfigurationSettings == null) {
			return this;
		}
		if (bromine == null) {
			this.bromine = testConfigurationSettings.getBromine();
		}
		if (brominePort == null) {
			this.brominePort = testConfigurationSettings.getBrominePort();
		}
		if (bromineServer == null) {
			this.bromineServer = testConfigurationSettings.getBromineServer();
		}
		if (seleniumPort == null) {
			this.seleniumPort = testConfigurationSettings.getSeleniumPort();
		}
		if (seleniumRemote == null) {
			this.seleniumRemote = testConfigurationSettings.getSeleniumRemote();
		}
		if (seleniumServer == null) {
			this.seleniumServer = testConfigurationSettings.getSeleniumServer();
		}
		if (testURI == null) {
			this.testURI = testConfigurationSettings.getTestURI();
		}
		if (testURL == null) {
			this.testURL = testConfigurationSettings.getTestURL();
		}
		return this;
	}
	
	public void printHelp(PrintStream out) {
		printHelp(out, "", null);
	}
	
	public void printHelp(PrintStream out, String prefix, String name) {
		out.format("%-50s Enables/disables support for bromine." + (name != null ? " for " + name : "") + "\n", prefix + "test.bromineEnabled");
		out.format("%-50s Defines port name where the bromine server is located." + (name != null ? " for " + name : "") + "\n", prefix + "test.brominePort");
		out.format("%-50s Defines host name where the bromine server is located." + (name != null ? " for " + name : "") + "\n", prefix + "test.bromineHost");
		out.format("%-50s Defines port name where the selenium server is located." + (name != null ? " for " + name : "") + "\n", prefix + "test.seleniumPort");
		out.format("%-50s Defines support for connection to the remote server instance." + (name != null ? " for " + name : "") + "\n", prefix + "test.testRemote");
		out.format("%-50s Defines host name where the selenium server is located." + (name != null ? " for " + name : "") + "\n", prefix + "test.seleniumHost");
		out.format("%-50s Defines relative URI of the testing home page." + (name != null ? " for " + name : "") + "\n", prefix + "test.testUri");
		out.format("%-50s Defines root URL of the testing site." + (name != null ? " for " + name : "") + "\n", prefix + "test.testHost");
	}
}
